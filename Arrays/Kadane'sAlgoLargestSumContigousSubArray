#include <iostream>
#include<bits/stdc++.h>
using namespace std;
//KADANE'S ALGORITHM
/* DYNAMIC PROGRAMMING APPROACH */
//using the previous sum sub problem we are calculating the maximum sum O(n) approach
int maxSubArraySum(int a[], int n)
{
    int larger=a[0];
    int max_so_far=a[0];
    //assuming every element is the last element of the sub array then we have two cases considering tha element
    //as maximum element and ading to max_so_far and travesing further
    for(int i=1;i<n;i++)
    {
        max_so_far=max(a[i], max_so_far+a[i]);

        if(max_so_far>larger)
        {
            larger=max_so_far;
        }
        
        if(max_so_far<0)
        max_so_far=0;
    }
    return larger;
}
/*void maxSubArraySum(int a[], int n)
{
    int max=INT_MIN;
    int sum=10;
    for(int i=0;i<n-1;i++)
    {
        int csum=a[i];
        //we traverse through every inner sub array and calculate the sum of every subarray usinf two loops
        for(int j=i+1;j<n;j++)
        {
           csum+=a[j];
            
            if(csum>max)    
            {
            max=csum;
            
            }
    
        }
    }
    cout<<max << "\n";
}
*/

int main() {
    int a[]={1,-2, 3, 5, 7, -9};
    int n = sizeof(a)/sizeof(a[0]);
    cout <<maxSubArraySum(a, n) << " ";
}
