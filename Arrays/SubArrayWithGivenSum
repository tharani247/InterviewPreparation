#include <iostream>
#include<bits/stdc++.h>
using namespace std;

int maxSubArraySum(int a[], int n)
{
    int sum=10;
    int csum=a[0];
    int start=0;
    //sliding window approach
    for(int i=1;i<n;i++)
    {
        if(csum>sum && start<i-1)
        {
            csum-=a[start];
            start++;
        }
        //here start+1 enduk ante printing as 1-indexed array but processing as zero indexed array
        if(csum==sum)
        {
            cout << start+1 << " " << i;
            return 1;
        }
        if(i<n)
        {
        csum+=a[i];
        }
        
    }
    cout << "No Subarray Found" << "\n";
    return 0;
}
// calculating the every subarray using two loops
/*void maxSubArraySum(int a[], int n)
{
    
    int sum=10;
    for(int i=0;i<n-1;i++)
    {
        int csum=a[i];
        //we traverse and find the sum through every smaller loop 
        for(int j=i+1;j<n;j++)
        {
           
            if(csum==sum)
            {
               cout << i+1 << " " << j+1 <<"\n";            
            }
            if(csum>sum||j==n)
            break;
             csum+=a[j];
        }
    }
}*/


int main() {
    int a[]={1, 2, 3, 5, 7,9};
    int n = sizeof(a)/sizeof(a[0]);
    maxSubArraySum(a, n);
}
